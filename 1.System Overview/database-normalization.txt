Database normalization is the process of organizing the attributes and tables of a relational database to minimize data redundancy. Redundant data wastes disk space and creates maintenance problems.

Normalization involves decomposing a table into less redundant (and smaller) tables but without losing information; defining foreign keys in the old table referencing the primary keys of the new ones. The objective is to isolate data so that additions, deletions, and modifications of an attribute can be made in just one table and then propagated through the rest of the database using the defined foreign keys.

There are a few rules for database normalization. Each rule is called a "normal form." 

Edgar F. Codd, the inventor of the relational model (RM), introduced the concept of normalization and what we now know as the First normal form (1NF) in 1970. Codd went on to define the Second normal form (2NF) and Third normal form (3NF) in 1971, and Codd and Raymond F. Boyce defined the Boyce-Codd Normal Form (BCNF) in 1974. Informally, a relational database table is often described as "normalized" if it is in the Third Normal Form. Most 3NF tables are free of insertion, update, and deletion anomalies.

First Normal Form
•Eliminate repeating groups in individual tables. 
•Create a separate table for each set of related data. 
•Identify each set of related data with a primary key. 

Second Normal Form
•Create separate tables for sets of values that apply to multiple records. 
•Relate these tables with a foreign key. 

Third Normal Form
•Eliminate fields that do not depend on the key.

Fourth normal form, also called Boyce Codd Normal Form (BCNF), and fifth normal form do exist, but are rarely considered in practical design. Disregarding these rules may result in less than perfect database design, but should not affect functionality. 


Advantages of normalization
1. Use storage space efficiently
2. Eliminate redundant data
3. Smaller database: By eliminating duplicate data, you will be able to reduce the overall size of the database.
4. Better performance:
a. Narrow tables: Having more fine-tuned tables allows your tables to have less columns and allows you to fit more records per data page.
b. Fewer indexes per table mean faster maintenance tasks such as index rebuilds.
c. Only join tables that you need.


1. Smaller database: By eliminating duplicate data, you will be able to reduce the overall size of the database.
2. Better performance:
a. Narrow tables: Having more fine-tuned tables allows your tables to have less columns and allows you to fit more records per data page.
b. Fewer indexes per table mean faster maintenance tasks such as index rebuilds.
c. Only join tables that you need.
